generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  address      String?
  date_birth   DateTime
  email        String   @unique
  password     String
  role         Role
  phone_number String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  services     Service[]  @relation("UserServices")
  comments     Comments[]
  ratings      Rating[]
 
 
  @@map("users")
}

model Freelancer {
  id             String        @id @default(uuid())
  name           String
  address        String?
  date_birth     DateTime
  email          String        @unique
  password       String
  phone_number   String
  workCategory   WorkCategory  @relation(fields: [work_id], references: [id])
  work_id        String
  link_portfolio String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  services       Service[]     @relation("FreelancerServices")

  @@map("freelancers")
}

model WorkCategory {
  id          String       @id @default(uuid())
  name        String  @unique
  freelancers Freelancer[]

  @@map("work_categories")
}

model Service {
  id            String      @id @default(uuid())
  user          User        @relation("UserServices", fields: [user_id], references: [id])
  user_id       String
  freelancer    Freelancer  @relation("FreelancerServices", fields: [freelancer_id], references: [id])
  freelancer_id String
  status        ServiceStatus
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  comments      Comments[]
  ratings       Rating[]

  @@map("services")
  @@unique([user_id, freelancer_id, status]) 
}

model Comments {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  service    Service @relation(fields: [service_id], references: [id])
  service_id String
  comment    String
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("comments")
}

model Rating {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  service    Service  @relation(fields: [service_id], references: [id])
  service_id String
  rating     Decimal  @db.Decimal(2,1)
  createdAt DateTime   @default(now()) @map("created_at")


  @@map("ratings")

}

enum Role {
  USER  
  ADMIN  
}

enum ServiceStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
